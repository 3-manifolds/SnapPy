choose_generators.c:        z[3] = complex_div(numerator, denominator);   /* will handle division by Zero correctly */

in compute_fourth_corner

cusp_shapes.c:        shape[i] = complex_div(translation[L][i], translation[M][i]);   /* will handle division by Zero correctly */
cusp_shapes.c:                new_diff = complex_div(old_diff, rotation);
dual_curves.c:    fz = complex_div(
dual_curves.c:         || complex_modulus(complex_div(complex_minus(fz, w), fz)) > FRACTIONAL_DIFF
matrix_generators.c:    k = complex_div(
shortest_cusp_basis.c:    cusp_modulus = complex_div(v,u);
shortest_cusp_basis.c:        return complex_div(v,u);
sl2c_matrices.c:            a[i][j] = complex_div(a[i][j], factor);
